#summary One-sentence summary of this page.

= Mediawiki text to HTML conversion =
The general idea for the wiki to html "WikiModel" is, that the common wiki syntax rendering is hidden in the internal WikipediaParser. 
Users of the API should derive a class from WikiModel or AbstractWikiModel, where special things could be managed.

A simple wiki to html fragment looks like this:
{{{
public static void main(String[] args)
	{
		WikiModel wikiModel = 
                            new WikiModel("http://www.mywiki.com/wiki/${image}", 
                                          "http://www.mywiki.com/wiki/${title}");
		String htmlStr = wikiModel.render("This is a simple [[Hello World]] wiki tag");
		System.out.print(htmlStr);
	}
}}}


You can for example overwrite the {{{WikiModel#parseInternalImageLink()}}} method to change the default rendering behaviour of the {{{[[Image:...]]}}} tag.

{{{
public class WikiTestModel extends WikiModel {
  public WikiTestModel(String imageBaseURL, String linkBaseURL) {
    super(imageBaseURL, linkBaseURL);
  }

  public void parseInternalImageLink(StringBuffer writer, String imageNamespace, String name) {
    ...

    ...
  }
}
}}}

By default the rendering engine doesn't allow the style attribute to avoid cross-site scripting risks.
You can define the style attribute as allowed in a static block of your WikiModel implementation.
{{{
  static {
    TagNode.addAllowedAttribute("style");  
    ...
  }
}}}

Look in the WikiModel.java and AbstractWikiModel.java sources for an example:<br>
  * http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-core/src/main/java/info/bliki/wiki/model/IWikiModel.java
  * http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-core/src/main/java/info/bliki/wiki/model/AbstractWikiModel.java

A more advanced example can be found in the [http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki.test/bliki-test/src/main/java/info/bliki/api/HTMLCreatorTest.java HTMLCreatorTest.java] file. If you run this example the first time, the [http://en.wikipedia.org/wiki/Tom_Hanks Tom Hanks] wiki source from Wikipedia is downloaded through the [http://en.wikipedia.org/w/api.php Wikipedia API]. The downloaded wiki texts and templates are stored in an [http://en.wikipedia.org/wiki/Apache_Derby Apache Derby] database, and associated images are downloaded in an already existing image directory <code>c:/temp/WikiImages</code>. After the first run there's a new Derby database created in the directory <code>C:\temp\WikiDB</code>. Every subsequent run of this code snippet will only download the [http://en.wikipedia.org/wiki/Tom_Hanks Tom Hanks] wiki source. The associated templates and images are already cached in the Derby database and in the images directory:
{{{
	public static void testCreator001() {
		String[] listOfTitleStrings = { "Tom Hanks" };
		User user = new User("", "", "http://en.wikipedia.org/w/api.php");
		user.login();
		String mainDirectory = "c:/temp/";
		// the following subdirectory should not exist if you would like to create a
		// new database
		String databaseSubdirectory = "WikiDB";
		// the following directory must exist for image downloads
		String imageDirectory = "c:/temp/WikiImages";
		WikiDB db = null;

		try {
			db = new WikiDB(mainDirectory, databaseSubdirectory);
			APIWikiModel wikiModel = new APIWikiModel(user, db, "${image}", "${title}", imageDirectory);
			DocumentCreator creator = new DocumentCreator(wikiModel, user, listOfTitleStrings);
			creator.setHeader(HTMLConstants.HTML_HEADER1 + HTMLConstants.CSS_STYLE + HTMLConstants.HTML_HEADER2);
			creator.setFooter(HTMLConstants.HTML_FOOTER);
			creator.renderToFile(mainDirectory + "TomHanks.html");
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e1) {
			e1.printStackTrace();
		} finally {
			if (db != null) {
				try {
					db.tearDown();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
}}}