#summary How to convert Mediawiki text to HTML
#labels Featured,Phase-Implementation
#sidebar TableOfContents

<wiki:toc max_depth="2" />

== Introduction ==
In this wiki text you will find some examples how to convert Wikipedia markup text into HTML text.

For the following examples make sure, that you have the current {{{bliki-core-3.0.xx.jar}}} (version >= 3.0.18) included in your classpath.

The bliki core depends on the following JARs:
  * commons-logging-1.0.4.jar
  * commons-lang-2.4.jar
  * commons-codec-1.2.jar
  * commons-httpclient-3.1.jar 
  * commons-compress-1.0.jar (for reading Mediawiki dumps)
  * junit-4.5.jar (only for JUnit tests)

If you use Eclipse make sure that your projects _text file encoding_ is *UTF-8*

== Basic Usage ==
The following Java code snippet: 
{{{
...
  import info.bliki.wiki.model.WikiModel;
...


...
  String htmlText = WikiModel.toHtml("This is a simple [[Hello World]] wiki tag");
...
}}}

returns the following HTML text string:
{{{
<p>This is a simple <a href="/Hello_World" title="Hello World">Hello World</a> wiki tag</p>
}}}

If you would like to write to a {{{java.io.Writer}}}, you can use the {{{toHtml()}}} method like this:
{{{
  java.io.StringWriter writer = new java.io.StringWriter();

  try {
    WikiModel.toHtml("This is a simple [[Hello World]] wiki tag", writer);
    writer.flush();
    ...

    writer.close();
  } catch (IOException e) {
    e.printStackTrace();
  }
}}} 

== Customizing the conversion output ==
The general idea for the wiki to html [http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-core/src/main/java/info/bliki/wiki/model/IWikiModel.java IWikiModel] interface is, that the common wiki syntax rendering is hidden in the internal `WikipediaParser`. 
Users of the API should derive a new wiki model class from [http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-core/src/main/java/info/bliki/wiki/model/WikiModel.java WikiModel] or [http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-core/src/main/java/info/bliki/wiki/model/AbstractWikiModel.java AbstractWikiModel], so that the conversion could be customized by overriding predefined class methods.

A simple wiki text to HTML conversion looks like this:
{{{
public static void main(String[] args)
	{
		WikiModel wikiModel = 
                            new WikiModel("http://www.mywiki.com/wiki/${image}", 
                                          "http://www.mywiki.com/wiki/${title}");
		String htmlStr = wikiModel.render("This is a simple [[Hello World]] wiki tag");
		System.out.print(htmlStr);
	}
}}}

and creates the following HTML snippet:
{{{
<p>This is a simple <a href="http://www.mywiki.com/wiki/Hello_World" title="Hello World">Hello World</a> wiki tag</p>
}}}

As you can see the {{{${title}}}} variable is replaced by the text of the wikilink according to the rules specified in the [http://meta.wikimedia.org/wiki/Help:Link Mediawiki Help:Link] article.

The prefered way to use your own implemented {{{myWikiModel}}} is to create a {{{new MyWikiModel(...)}}} for every wiki text you would like to render.

If you would like to reuse your own {{{myWikiModel}}} you should call the {{{setUp()}}} method before and the {{{tearDown()}}} method after finishing the rendering.
{{{
    try {
      myWikiModel.setUp();

      String htmlStr = myWikiModel.render(<some text>);
      System.out.print(htmlStr);
    } finally {
      myWikiModel.tearDown();
    }
}}}
In the {{{setUp()}}} or {{{tearDown()}}} method of your own {{{MyWikiModel}}} you have to call the {{{AbstractWikiModel#initialize()}}} method or reinitialize the protected attributes in {{{AbstractWikiModel}}}, {{{WikiModel}}} to avoid memory leaks.


You can for example overwrite the {{{WikiModel#parseInternalImageLink()}}} method to change the default rendering behaviour of the {{{[[Image:...]]}}} tag.

{{{
public class WikiTestModel extends WikiModel {
  public WikiTestModel(String imageBaseURL, String linkBaseURL) {
    super(imageBaseURL, linkBaseURL);
  }
  public void parseInternalImageLink(String imageNamespace, String rawImageLink) {
    ...

    ...
  }
}
}}}

By default the rendering engine doesn't allow the style attribute to avoid cross-site scripting risks.
You can define the style attribute as allowed in a static block of your WikiModel implementation.
{{{
  static {
    TagNode.addAllowedAttribute("style");  
    ...
  }
}}}

Look in the WikiModel.java and AbstractWikiModel.java sources for an example:<br>
  * http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-core/src/main/java/info/bliki/wiki/model/WikiModel.java
  * http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-core/src/main/java/info/bliki/wiki/model/AbstractWikiModel.java

== Advanced example for converting Wikipedia texts to HTML ==
A more advanced example can be found in the [http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-pdf/src/test/java/info/bliki/api/creator/HTMLCreatorExample.java HTMLCreatorExample.java] file. If you run this example the first time, the [http://en.wikipedia.org/wiki/Tom_Hanks Tom Hanks] wiki source from Wikipedia is downloaded through the [http://en.wikipedia.org/w/api.php Wikipedia API]. The downloaded wiki texts and templates are stored in an [http://en.wikipedia.org/wiki/Apache_Derby Apache Derby] database, and associated images are downloaded in an already existing image directory {{{C:\temp\WikiImages}}} (see the [http://code.google.com/p/gwtwiki/source/browse/trunk/info.bliki.wiki/bliki-pdf/src/main/java/info/bliki/wiki/impl/APIWikiModel.java APIWikiModel#getRawWikiContent()] method). After the first run there's a new Derby database created in the directory {{{C:\temp\WikiDB}}}. Every subsequent run of this code snippet will only download the [http://en.wikipedia.org/wiki/Tom_Hanks Tom Hanks] wiki source. The associated templates and images are already cached in the Derby database and in the images directory:
{{{
	public static void testWikipediaENAPI(String title) {
		String[] listOfTitleStrings = {
			title
		};
		String titleURL = Encoder.encodeTitleLocalUrl(title);
		User user = new User("", "", "http://en.wikipedia.org/w/api.php");
		user.login();
		String mainDirectory = "c:/temp/";
		// the following subdirectory should not exist if you would like to create a
		// new database
		String databaseSubdirectory = "WikiDB";
		// the following directory must exist for image downloads
		String imageDirectory = "c:/temp/WikiImages";
		// the generated HTML will be stored in this file name:
		String generatedHTMLFilename = mainDirectory + titleURL + ".html";
		
		WikiDB db = null;

		try {
			db = new WikiDB(mainDirectory, databaseSubdirectory);
			APIWikiModel wikiModel = new APIWikiModel(user, db, "${image}", "${title}", imageDirectory);
			DocumentCreator creator = new DocumentCreator(wikiModel, user, listOfTitleStrings);
			creator.setHeader(HTMLConstants.HTML_HEADER1 + HTMLConstants.CSS_SCREEN_STYLE + HTMLConstants.HTML_HEADER2);
			creator.setFooter(HTMLConstants.HTML_FOOTER);
			wikiModel.setUp();
			creator.renderToFile(generatedHTMLFilename);

		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e1) {
			e1.printStackTrace();
		} finally {
			if (db != null) {
				try {
					db.tearDown();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static void testCreator001() {
		testWikipediaENAPI("Tom Hanks");
	}

	public static void main(String[] args) {
		testCreator001();
	}
}}}