#summary How to use the WikiModel
#labels Phase-Implementation

= Introduction =
For this page we assume that we use the following code snippet with a {{{MyWikiModel}}} which is derived from the {{{AbstractWikiModel}}} or {{{IWikiModel}}} interface:

{{{
  MyWikiModel wikiModel = new MyWikiModel("http://www.mywiki.com/wiki/${image}",
                                          "http://www.mywiki.com/wiki/${title}"); 
  String wikiText = "some wiki text we would like to convert to HTML";
  String htmlStr = wikiModel.render(wikiText); 
  System.out.print(htmlStr); 
}}}

= How to expand templates found in a wiki text =
If our model should support expanding templates we have to implement the {{{IWikiModelgetRawWikiContent()}}} method.

If we would like to expand the {{{my template}}} template with the text "foo" in the following string:

{{{
  wikiText = "This is a simple [[Hello World]] wiki tag {{my template}}";
}}} 

our implementation method {{{MyWikiModel#getRawWikiContent()}}} looks something like this:

{{{
	public final static String MY_TEMPLATE = "foo";
...


...
        @Override
        public String getRawWikiContent(String namespace, String articleName, Map<String, String> map) {
		String result = super.getRawWikiContent(namespace, articleName, map);
		if (result != null) {
			// found magic word template
			return result;
		}
		String name = encodeTitleToUrl(articleName, true);
		if (isTemplateNamespace(namespace)) {
			if (name.equals("My_template")) {
				return MY_TEMPLATE;
			}
		}
		return null;
}}}

In the {{{info.bliki.wiki.impl.APIWikiModel}}} class you can find a more sophisticated example in the method {{{getRawWikiContent()}}}. There the template content is cached in an internal {http://db.apache.org/derby/ Java Derby] database. If the text is not available in the database we export it directly from a wiki which supports the Mediawiki API with the {{{info.bliki.api.User#queryContent(String[] listOfTitleStrings)}}} method.